Sample Input
3
4
4
300 400 600 700
2
1321 2450
3
500 123 873
4
600 800 150 700

Sample Output
2200
2450
1496
2400

Explanation
• In the 1st testcase,300 and 400 go together (which costs 400) and 300 comes back (total cost 700
now). Now 600 and 700 go (total cost 1400) and 400 comes back (total 1800) and now 300 and 400 go
(total cost 2200)!
• In the 2nd testcase, both can reach the temple in 2450 as max (1321,2450) =2450.
• In the 3rd testcase, second and third will go first. So, cost will be max (123,873) =873. Now second
person will come back and take the first along with him. So, coming back cost is 123. Then taking first
one along costs max (123,500) =500.
Therefore, total cost = 500+123+873 = 1496

This is the explaination of first caes:
300 and 400 go together (which costs 400) and 300 comes back 
(total cost 700 now). Now 600 and 700 go(total cost 1400) and 400 
comes back(total 1800) and now 300 and 400 go(total cost 2200)!

Explaination of 4th case:
150 will be used.
150 and 800 go,so cost=800+150.
Now,150 and 700 go,so cost=700+150.
Now,150 and 600 go,cost=600.
Total cost=800+150+700+150+600=2400


#include stdio.h
#include stdlib.h
int comp(const void  a,const void b)
{
return ((int )a) - ((int )b);
}
int min(int a,int b)
{
return a  b  ab;
}
int main()
{
int t,n;
long ans = 0;
int arr;
scanf(%d,&t);
while(t--){
scanf(%d,&n);
arr = malloc(sizeof(int)n);
int i;
ans = 0;
for(i = 0; i  n; i++)
scanf(%d,arr+i);
qsort(arr,n,sizeof(int),comp);
while(n  3)
{
ans = ans + min((2arr[0]+arr[n-1]+arr[n-2]),(arr[0]+2arr[1]+arr[n-1]));
n -= 2;
}
if (n == 3)
ans += (arr[0]+arr[1]+arr[2]);
else if (n == 2)
ans += arr[1];
else
ans += arr[0];
printf(%ldn,ans);
free(arr);
}
return 0;
}
